<<<<<<< HEAD
regions <- st_transform(regions, crs_target)
departments <- st_transform(departments, crs_target)
communes <- st_transform(communes, crs_target)
# 4.4) Définir 'senegal' comme l'union de toutes les régions
senegal_sf <- st_union(regions)
# ─────────────────────────────────────────────────────────────────────────────
# global.R : Lecture des shapefiles et rasters, et calculs nécessaires
# ─────────────────────────────────────────────────────────────────────────────
# 1) Chargement des librairies nécessaires
library(shiny)          # Création d'applications interactives
library(shinyjs)        # Intégration de JavaScript dans Shiny
library(leaflet)        # Création de cartes interactives
library(dplyr)          # Manipulation des données
library(ggplot2)        # Visualisation des données
library(sf)             # Lecture et manipulation des shapefiles
sf_use_s2(FALSE)        # Désactivation temporaire de s2 pour éviter les erreurs
library(raster)         # Manipulation des données raster
library(exactextractr)  # Extraction des valeurs raster par polygone
library(viridis)        # Palette de couleurs pour les visualisations
# 2) Spécification du(s) pays et indicateur(s)
fake_countries <- c("Sénégal")
fake_indicators <- list(
"Sénégal" = c("Taux moyen de Paludisme", "Taux d'enfants atteints par la malaria")
=======
pop_cameroun
pop_admin1 <- exact_extract(pop, region, fun = "sum", progress = FALSE)
region$population <- pop_admin1
pop_region <- region %>%
st_drop_geometry() %>%
select(ADM1_FR, population)
pop_region <- region %>%
st_drop_geometry() %>%
dplyr::select(ADM1_FR, population)
pop_region <- data.frame(pop_region)
head(pop_region, 5)
pop_admin2 <- exact_extract(pop, departement, fun = "sum", progress = FALSE)
departement$population <- pop_admin2
pop_departement <- departement %>%
st_drop_geometry() %>%
dplyr::select(ADM2_FR, population)
pop_departement <- data.frame(pop_departement)
head(pop_departement, 5)
# Vérifications
t <- data.frame(sum_region = sum(pop_region$population),
sum_departements=sum(pop_departement$population),
# sum_arrondissements=sum(pop_arrondissement$population))
>>>>>>> 463f7afe80b30b901dc047bb3ee9c7815a0d6d35
)
# Vérifications
t <- data.frame(sum_region = sum(pop_region$population),
sum_departements=sum(pop_departement$population)
# sum_arrondissements=sum(pop_arrondissement$population))
)
t
## Voyons la taille des pixels en dergrés
res(pop)
pop_newResw <- aggregate(pop, fact = 50, fun = sum,
filename = "CMR_population_aggregated_5km.tif",
overwrite = TRUE)
print(a)
pop_newResw <- aggregate(pop, fact = 50, fun = sum,
filename = "SN_population_aggregated_5km.tif",
overwrite = TRUE)
Metadonnées
## Metadonnées du nouveau raster
pop_newResw
# Vérifications
pop_a <- exact_extract(pop_newResw %>%
crop(cameroun_1) %>%
mask(cameroun_1), cameroun_1, fun = "sum", progress = FALSE)
pop_df <- as.data.frame(rasterToPoints(pop_newResw), stringsAsFactors = FALSE)
colnames(pop_df) <- c("x", "y", "value")
ggplot() +
geom_tile(data = pop_df, aes(x = x, y = y, fill = value)) +
geom_sf(data = departement, fill = NA, color = "black", size = 0.5) +  # Ajouter les contours des régions
scale_fill_viridis(option = "plasma", na.value = "transparent") +
labs(title = "Population du Cameroun avec départements",
fill = "Population") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)+
annotation_north_arrow(location = "tl", which_north = "true", pad_x = unit(0.1, "in"), pad_y = unit(0.1, "in"), style = north_arrow_fancy_orienteering()) +
annotation_scale(location = "bl", width_hint = 0.5)
# Multiplication
pop_child <- pop_newResw*0.001
pop_b <- exact_extract(pop_child %>%
crop(cameroun_1) %>%
mask(cameroun_1), cameroun_1, fun = "sum", progress = FALSE)
pop_b
(pop_b/pop_a)*100
pop_df <- data.frame(rasterToPoints(pop_child), stringsAsFactors = FALSE)
colnames(pop_df) <- c("x", "y", "value")
ggplot() +
geom_tile(data = pop_df, aes(x = x, y = y, fill = value)) +
geom_sf(data = departement, fill = NA, color = "black", size = 0.5) +  # Ajouter les contours des régions
scale_fill_viridis(option = "turbo", na.value = "transparent") +
labs(title = "Population du Cameroun avec régions",
fill = "Population") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)+
annotation_north_arrow(location = "tl", which_north = "true", pad_x = unit(0.1, "in"), pad_y = unit(0.1, "in"), style = north_arrow_fancy_orienteering()) +
annotation_scale(location = "bl", width_hint = 0.5)
# Raster des situations (1, 2, 3)
malaria_2022_CMR_1 <- resample(malaria_2022_CMR, pop_child, method = "ngb")
# Raster des situations (1, 2, 3)
malaria_2022_CMR_1 <- resample(malaria_2022, pop_child, method = "ngb")
# Raster des taux en 2022
taux_2022_1 <- resample(taux_2022, pop_child, method = "ngb")
# Nombre d'enfants "par situation" (atteints ou non)
aucun <- calc(malaria_2022_CMR_1 == 1, fun = function(x) { ifelse(x, 1, 0) })*pop_child
moyen <- calc(malaria_2022_CMR_1 == 2, fun = function(x) { ifelse(x, 1, 0) })*pop_child
grave <- calc(malaria_2022_CMR_1 == 3, fun = function(x) { ifelse(x, 1, 0) })*pop_child
# Raster des taux en 2022
taux_2022_1 <- resample(taux_2022, pop_child, method = "ngb")
plot(malaria_2022_CMR_1)
A <-  sum(values(pop_aucun), na.rm = TRUE)
plot(aucun)
plot(moyen)
plot(grave)
plot(grave)
t1 <- data.frame(
situation_aucun = c(A, A*100/(A+B+C)),
situation_moyen = c(B, B*100/(A+B+C)),
situation_grave = c(C, C*100/(A+B+C)),
somme =  c( A+B+C, A*100/(A+B+C)+ B*100/(A+B+C)+ C*100/(A+B+C))
)
plot(malaria_2022)
malaria_enfants <-malaria_2022*pop_child
malaria_enfants <-malaria_2022_CMR_1*pop_child
plot(malaria_enfants)
malaria_enfants <-malaria_2022_CMR_1*0.001
plot(malaria_enfants)
malaria_enfants <-malaria_2022_CMR_1*pop_child
plot(malaria_enfants)
malaria_enfants <-malaria_2022_CMR_1
plot(malaria_enfants)
malaria_enfants <-malaria_2022_CMR_1*pop_child
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
plot(malaria_enfants)
malaria_enfants <-malaria_2022_CMR_1/pop_child
plot(malaria_enfants)
malaria_enfants <-malaria_2022_CMR_1*0.001
plot(malaria_enfants)
malaria_enfants <-malaria_2022_CMR_1*0.001
malaria_enfants <-malaria_2022_CMR_1*0.001
# Enregistrer le raster au format TIFF
writeRaster(malaria_enfants, "C:/Users/HP/Downloads/malaria_enfants/taux malaria_enfants.tif", format = "GTiff", overwrite = TRUE)
pop_cameroun$taux_malade <- pop_cameroun$pop_malade/(pop_cameroun$population*0.001)
pop_cameroun
pop_regio
pop_region
plot(pop_cameroun)
raster_pop_enfants = senegal*0.001
raster_pop_enfants <-  senegal*0.001
plot(senegal)
plot(senegal_)
raster_pop_enfants <-  senegal_*0.001
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
raster_pop_enfants <-  pop*0.001
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
res(malaria_2022)
res(raster_pop_enfants)
pop_newResw <- aggregate(pop, fact = 50, fun = sum,
filename = "SN_population_aggregated_5km.tif",
overwrite = TRUE)
raster_pop_enfants <-  pop_newResw*0.001
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
raster_pop_enfants <-  pop_newResw*0.001
res(aster_pop_enfants)
res(raster_pop_enfants)
raster(malaria_2022)
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
plot( malaria_2022)
plot(raster_pop_enfants)
plot( malaria_2022)
plot(raster_pop_enfants)
raster_pop_enfants <-  pop_newResw*0.001
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
origin(raster_pop_enfants)
origin(malaria_2022)
origin(raster_pop_enfants) <- origin(malaria_2022)
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
plot(raster_nombre_malaria_enfants)
raster_taux_enfants_malaria  <-raster_nombre_malaria_enfants/raster_pop_enfants
plot(raster_taux_enfants_malaria)
plot(pop_region)
# Convertir le shapefile en raster
raster_regions <- rasterize(regions, raster_nombre_malaria_enfants, field = "region_id") # 'region_id' = colonne contenant l'ID des régions
regions
# Convertir le shapefile en raster
raster_regions <- rasterize(regions, raster_nombre_malaria_enfants, field = "ADM1_FR") # 'region_id' = colonne contenant l'ID des régions
# Enregistrer le raster au format TIFF
writeRaster(raster_taux_enfants_malaria, "C:/Users/HP/Downloads/malaria_enfants/raster_taux_enfants_malaria.tif", format = "GTiff", overwrite = TRUE)
plot(raster_taux_enfants_malaria)
# 7) Calcul du taux moyen par niveau administratif (Taux moyen de Paludisme)
region_means <- exact_extract(mean_raster, regions, 'mean')
region_means
plot(region_means)
# 7) Calcul du taux moyen par niveau administratif (Taux moyen de Paludisme)
region_nombre_enfants_malaria <- exact_extract(raster_nombre_malaria_enfants, regions, 'sum')
region_nombre_enfants_malaria
malaria_2022
raster_pop_enfants
pop_newResw
region_nombre_enfants <- exact_extract(raster_pop_enfants, regions, 'sum')
region_nombre_enfants
regions$nb_enfants_malaria<-region_nombre_enfants_malaria
regions$nb_enfants<-region_nombre_enfants
regions$taux_malaria_enf_region <- (regions$nb_enfants_malaria/regions$nb_enfants)*100
regions$taux_malaria_enf_region
regions$taux_malaria_enf_region <- (regions$nb_enfants_malaria/regions$nb_enfants)
leaflet(regions) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(taux_malaria_enf_region)),
fillOpacity = 0.7,
color = "white",
weight = 2,
popup = ~paste0("Région : ", ADM1_FR,
"<br>Taux : ", round(get(taux_malaria_enf_region), 3))
) %>%
addLegend("bottomright", pal = pal, values = regions[[taux_malaria_enf_region]],
title = paste(data_reac()$indicator, "(Région)"))
leaflet(regions) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(get(taux_malaria_enf_region)),
fillOpacity = 0.7,
color = "white",
weight = 2,
popup = ~paste0("Région : ", ADM1_FR,
"<br>Taux : ", round(get(taux_malaria_enf_region), 3))
) %>%
addLegend("bottomright", pal = pal, values = regions[[taux_malaria_enf_region]],
)
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
writeRaster(raster_nombre_malaria_enfants, "C:/Users/HP/Downloads/malaria_enfants/raster_nombre_malaria_enfants.tif", format = "GTiff", overwrite = TRUE)
writeRaster(raster_pop_enfants, "C:/Users/HP/Downloads/malaria_enfants/raster_pop_enfants.tif", format = "GTiff", overwrite = TRUE)
raster_nombre_malaria_enfants<- raster("C:/Users/HP/Downloads/malaria_enfants/raster_nombre_malaria_enfants.tif")
raster_nombre_malaria_enfants
raster_pop_enfants<- raster("C:/Users/HP/Downloads/malaria_enfants/raster_pop_enfants.tif")
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
print(raster_layer)
plot(raster_nombre_malaria_enfants)
plot(raster_pop_enfants)
plot(raster_nombre_malaria_enfants)
plot(raster_pop_enfants)
plot(mean_raster)
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
plot(raster_nombre_malaria_enfants/mean_raster)
plot(raster_nombre_malaria_enfants/raster_pop_enfants)
# 7) Calcul du taux moyen par niveau administratif (Taux moyen de Paludisme)
region_means <- exact_extract(mean_raster, regions, 'mean')
plot(raster_nombre_malaria_enfants/raster_pop_enfants)
plot(raster_nombre_malaria_enfants/raster_pop_enfants)
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
plot(raster_taux_enfants_malaria)
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
BI_SN <- raster("C:\Users\HP\OneDrive\Documents\GitHub\Projet_Final_Stat_Spatiale\data\Senegal\TP10_Indicators_SEN\BI_SN.tif")
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif")
plot(BI_SN)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tiff")
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif")
BI_SN <- st_read("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif")
runApp('Scripts R KD/app_KD.R')
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif") %>%
crop(senegal) %>%
mask(senegal)
library(tidyr)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif") %>%
crop(senegal) %>%
mask(senegal)
library(dplyr)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif") %>%
crop(senegal) %>%
mask(senegal)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif")
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/NDVI_SN.tif")
plot(BI_SN)
runApp('Scripts R KD/app_KD.R')
BI_SN
View(BI_SN)
library(terra)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif") %>%
crop(senegal) %>%
mask(senegal)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/NDVI_SN.tif")
plot(BI_SN)
summary(BI_SN)  # Vérifiez les valeurs minimales, maximales et NA
unique(values(BI_SN))
print(res(BI_SN))
0.0002694946*111
5000/30
# Agréger le raster avec un facteur de 5 (chaque pixel regroupe 5x5 pixels)
BI_SN_aggregated <- aggregate(BI_SN, fact = 167, fun = mean, na.rm = TRUE)
plot(BI_SN_aggregated)
summary(BI_SN_aggregated)
BI_SN <- raster("C:/Users/HP/Downloads/TP10_Indicators_SEN-20250122T235808Z-001/TP10_Indicators_SEN/BI_SN.tif") %>%
crop(senegal) %>%
mask(senegal)
BI_SN <- raster("C:/Users/HP/Downloads/TP10_Indicators_SEN-20250122T235808Z-001/TP10_Indicators_SEN/BI_SN.tif")
unique(values(BI_SN))
View(BI_SN)
plot(BI_SN)  # Visualisez le raster
BI_SN <- raster("C:/Users/HP/Downloads/TP10_Indicators_BFA-20250125T202801Z-004/TP10_Indicators_BFA/NDMI_BFA.tif")
View(BI_SN)
plot(BI_SN)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif")
plot(BI_SN)
BI_SN <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/TP10_Indicators_SEN/BI_SN.tif") %>%
crop(senegal) %>%
mask(senegal)
BI_SN <- raster("C:/Users/HP/OneDrive/1231116193333-Desktop/Desktop/ISEP3/Stat_spatiales/Projet Final Stat Spatiale/Projet Final Stat Spatiale/NDVI_Senegal.tif")
plot(BI_SN)
region_means <- exact_extract(BI_SN, regions, 'mean')
region_means
View(BI_SN_aggregated)
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
plot(mean_raster)
plot(raster_moyen_SN)
raster_moyen_SN  <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/Rasters/taux_moyen_malaria_SEN_2000_2022.tiff")
plot(raster_moyen_SN)
raster_moyen_SN  <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/Rasters/taux_moyen_malaria_BFA_2000_2022.tiff")
plot(raster_moyen_SN)
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
# Pour Burkina taux malaria chez les enfants
# Définir le répertoire de travail
setwd(dir = "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Burkina")
suppressMessages({
# Définir le chemin principal
base_path <- getwd()
# Charger les shapefiles
shapefile_path <- file.path(base_path, "Shapefiles")
bfa <- st_read(file.path(shapefile_path, "bfa_admbnda_adm0_igb_20200323.shp"), quiet = TRUE)
region <- st_read(file.path(shapefile_path, "bfa_admbnda_adm1_igb_20200323.shp"), quiet = TRUE)
departement <- st_read(file.path(shapefile_path, "bfa_admbnda_adm2_igb_20200323.shp"), quiet = TRUE)
# Charger les rasters
raster_path <- file.path(base_path, "Rasters")
malaria_2022 <- raster(file.path(raster_path, "202406_Global_Pf_Parasite_Rate_BFA_2022")) %>%
crop(bfa) %>%
mask(senegal)
pop <- raster(file.path(raster_path, "BFA_population_v1_1_gridded")) %>%
crop(bfa) %>%
mask(bfa)
})
suppressMessages({
# Définir le chemin principal
base_path <- getwd()
# Charger les shapefiles
shapefile_path <- file.path(base_path, "Shapefiles")
bfa <- st_read(file.path(shapefile_path, "bfa_admbnda_adm0_igb_20200323.shp"), quiet = TRUE)
region <- st_read(file.path(shapefile_path, "bfa_admbnda_adm1_igb_20200323.shp"), quiet = TRUE)
departement <- st_read(file.path(shapefile_path, "bfa_admbnda_adm2_igb_20200323.shp"), quiet = TRUE)
# Charger les rasters
raster_path <- file.path(base_path, "Rasters")
malaria_2022 <- raster(file.path(raster_path, "202406_Global_Pf_Parasite_Rate_BFA_2022.tiff")) %>%
crop(bfa) %>%
mask(senegal)
pop <- raster(file.path(raster_path, "BFA_population_v1_1_gridded")) %>%
crop(bfa) %>%
mask(bfa)
})
suppressMessages({
# Définir le chemin principal
base_path <- getwd()
# Charger les shapefiles
shapefile_path <- file.path(base_path, "Shapefiles")
bfa <- st_read(file.path(shapefile_path, "bfa_admbnda_adm0_igb_20200323.shp"), quiet = TRUE)
region <- st_read(file.path(shapefile_path, "bfa_admbnda_adm1_igb_20200323.shp"), quiet = TRUE)
departement <- st_read(file.path(shapefile_path, "bfa_admbnda_adm2_igb_20200323.shp"), quiet = TRUE)
# Charger les rasters
raster_path <- file.path(base_path, "Rasters")
malaria_2022 <- raster(file.path(raster_path, "202406_Global_Pf_Parasite_Rate_BFA_2022.tiff")) %>%
crop(bfa) %>%
mask(senegal)
<<<<<<< HEAD
# ─────────────────────────────────────────────────────────────────────────────
# 6) Visualisation de la population (première carte)
# ─────────────────────────────────────────────────────────────────────────────
pop_df <- as.data.frame(rasterToPoints(pop), stringsAsFactors = FALSE)
runApp('C:/Users/ALIOUNE KANE/Downloads/Projet_Final_Stats_Spatiales/Scripts R')
runApp('C:/Users/ALIOUNE KANE/Downloads/Projet_Final_Stats_Spatiales/Scripts R')
shiny::runApp('Scripts R')
=======
pop <- raster(file.path(raster_path, "BFA_population_v1_1_gridded.tiff")) %>%
crop(bfa) %>%
mask(bfa)
})
suppressMessages({
# Définir le chemin principal
base_path <- getwd()
# Charger les shapefiles
shapefile_path <- file.path(base_path, "Shapefiles")
bfa <- st_read(file.path(shapefile_path, "bfa_admbnda_adm0_igb_20200323.shp"), quiet = TRUE)
region <- st_read(file.path(shapefile_path, "bfa_admbnda_adm1_igb_20200323.shp"), quiet = TRUE)
departement <- st_read(file.path(shapefile_path, "bfa_admbnda_adm2_igb_20200323.shp"), quiet = TRUE)
# Charger les rasters
raster_path <- file.path(base_path, "Rasters")
malaria_2022 <- raster(file.path(raster_path, "202406_Global_Pf_Parasite_Rate_BFA_2022.tiff")) %>%
crop(bfa) %>%
mask(senegal)
pop <- raster(file.path(raster_path, "BFA_population_v1_1_gridded.tif")) %>%
crop(bfa) %>%
mask(bfa)
})
pop_newResw <- aggregate(pop, fact = 50, fun = sum,
filename = "SN_population_aggregated_5km.tif",
overwrite = TRUE)
raster_pop_enfants <-  pop_newResw*0.001
origin(raster_pop_enfants)
origin(malaria_2022)
origin(raster_pop_enfants) <- origin(malaria_2022)
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
plot(raster_nombre_malaria_enfants)
plot(raster_nombre_malaria_enfants)
plot(raster_pop_enfants)
plot(malaria_2022)
suppressMessages({
# Définir le chemin principal
base_path <- getwd()
# Charger les shapefiles
shapefile_path <- file.path(base_path, "Shapefiles")
bfa <- st_read(file.path(shapefile_path, "bfa_admbnda_adm0_igb_20200323.shp"), quiet = TRUE)
region <- st_read(file.path(shapefile_path, "bfa_admbnda_adm1_igb_20200323.shp"), quiet = TRUE)
departement <- st_read(file.path(shapefile_path, "bfa_admbnda_adm2_igb_20200323.shp"), quiet = TRUE)
# Charger les rasters
raster_path <- file.path(base_path, "Rasters")
malaria_2022 <- raster(file.path(raster_path, "202406_Global_Pf_Parasite_Rate_BFA_2022.tiff")) %>%
crop(bfa) %>%
mask(bfa)
pop <- raster(file.path(raster_path, "BFA_population_v1_1_gridded.tif")) %>%
crop(bfa) %>%
mask(bfa)
})
pop_newResw <- aggregate(pop, fact = 50, fun = sum,
filename = "SN_population_aggregated_5km.tif",
overwrite = TRUE)
raster_pop_enfants <-  pop_newResw*0.001
origin(raster_pop_enfants)
origin(malaria_2022)
origin(raster_pop_enfants) <- origin(malaria_2022)
raster_nombre_malaria_enfants <-raster_pop_enfants*malaria_2022
plot(malaria_2022)
raster_taux_enfants_malaria  <-raster_nombre_malaria_enfants/raster_pop_enfants
plot(raster_taux_enfants_malaria)
plot(malaria_2022)
bbff <- raster("C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Burkina/Rasters/202406_Global_Pf_Parasite_Rate_BFA_2022.tiff")
plot (bbff)
# Enregistrer le raster au format TIFF
writeRaster(raster_taux_enfants_malaria, "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Burkina/Rasters/malaria_enfants/raster_taux_enfants_malaria.tif", format = "GTiff", overwrite = TRUE)
writeRaster(raster_nombre_malaria_enfants, "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Burkina/Rasters/malaria_enfants/raster_nombre_malaria_enfants.tif", format = "GTiff", overwrite = TRUE)
writeRaster(raster_pop_enfants, "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Burkina/Rasters/malaria_enfants/raster_pop_enfants.tif", format = "GTiff", overwrite = TRUE)
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
runApp('~/GitHub/Projet_Final_Stat_Spatiale/Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
>>>>>>> 463f7afe80b30b901dc047bb3ee9c7815a0d6d35
