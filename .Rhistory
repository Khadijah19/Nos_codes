.screenshot-section { float: right; width: 50%; text-align: center; } \n
.screenshot { margin: 10px auto; border: 1px solid #ddd; border-radius: 10px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); }"
)),
fluidRow(
column(
12,
div(class = "content-box",
tags$h2("Guide d'Utilisation"),
div(
class = "text-section",
tags$ol(
tags$li(tags$span(style = "font-weight: bold;", "Sélectionner un pays et un Indicateur:"),
" Choisissez un pays et un indicateur à afficher. La carte par défaut montre les valeurs au niveau national."),
tags$li(tags$span(style = "font-weight: bold;", "Navigation sur la Carte:"),
" Utilisez les boutons zoom avant (+) ou zoom arrière (-) pour ajuster la vue."),
tags$li(tags$span(style = "font-weight: bold;", "Définition de l'Indicateur:"),
" Une brève définition de l’indicateur calculé. Plus de détails sont disponibles dans la section Notes techniques, qui explique la 'Probabilité de Dépassement et la Confiance dans les Changements au Fil du Temps.'"),
tags$li(tags$span(style = "font-weight: bold;", "Détails sur la carte:"),
" Explorez les détails supplémentaires fournis sur la carte."),
tags$li(tags$span(style = "font-weight: bold;", "Filtrage par Changement:"),
" Ajustez les paramètres pour mettre en évidence l'indicateur à un niveau administratif."),
tags$li(tags$span(style = "font-weight: bold;", "Highlight une région:"),
" Mettez en valeur une région spécifique pour des analyses ciblées."),
tags$li(tags$span(style = "font-weight: bold;", "Ajustez le curseur:"),
" Affinez les résultats en fonction d’un seuil particulier."),
tags$li(tags$span(style = "font-weight: bold;", "Téléchargement des Données:"),
" Cliquez sur le bouton Télécharger situé en dessous de la carte ou au-dessus du tableau pour récupérer les données."),
tags$li(tags$a("Lien vers la vidéo de démonstration", href = "Lien.html", target = "_blank"))
)
),
div(
class = "screenshot-section",
tags$img(src = "LOGO1.JPEG", class = "screenshot", width = "90%", alt = "Screenshot 1"),
tags$img(src = "LOGO2.JPEG", class = "screenshot", width = "90%", alt = "Screenshot 2"),
tags$img(src = "LOGO3.JPEG", class = "screenshot", width = "90%", alt = "Screenshot 3")
),
tags$div(style = "clear: both;") # Pour nettoyer le flottement
)
)
)
)
runApp('Scripts R KD/app_KD.R')
# ─────────────────────────────────────────────────────────────────────────────
# mod_guide_page.R
# Page "Guide"
# ─────────────────────────────────────────────────────────────────────────────
mod_guide_page_ui <- function(id) {
ns <- NS(id)
fluidPage(
tags$style(HTML(
"body { background-color: #f8f9fa; } \n
h2 { color: #007bff; } \n
.content-box { background-color: #ffffff; border-radius: 15px; padding: 20px; box-shadow: 1px 4px 6px rgba(0, 0, 0, 0.1); } \n
.text-section { float: left; width: 50%; padding-right: 20px; } \n
.screenshot-section { float: right; width: 50%; text-align: center; } \n
.screenshot { margin: 10px auto; border: 1px solid #ddd; border-radius: 10px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); }"
)),
fluidRow(
column(
12,
div(class = "content-box",
tags$h2("Guide d'Utilisation"),
div(
class = "text-section",
tags$ol(
tags$li(tags$span(style = "font-weight: bold;", "Sélectionner un pays et un Indicateur:"),
" Choisissez un pays et un indicateur à afficher. La carte par défaut montre les valeurs au niveau national."),
tags$li(tags$span(style = "font-weight: bold;", "Navigation sur la Carte:"),
" Utilisez les boutons zoom avant (+) ou zoom arrière (-) pour ajuster la vue."),
tags$li(tags$span(style = "font-weight: bold;", "Définition de l'Indicateur:"),
" Une brève définition de l’indicateur calculé. Plus de détails sont disponibles dans la section Notes techniques, qui explique la 'Probabilité de Dépassement et la Confiance dans les Changements au Fil du Temps.'"),
tags$li(tags$span(style = "font-weight: bold;", "Détails sur la carte:"),
" Explorez les détails supplémentaires fournis sur la carte."),
tags$li(tags$span(style = "font-weight: bold;", "Filtrage par Changement:"),
" Ajustez les paramètres pour mettre en évidence l'indicateur à un niveau administratif."),
tags$li(tags$span(style = "font-weight: bold;", "Highlight une région:"),
" Mettez en valeur une région spécifique pour des analyses ciblées."),
tags$li(tags$span(style = "font-weight: bold;", "Ajustez le curseur:"),
" Affinez les résultats en fonction d’un seuil particulier."),
tags$li(tags$span(style = "font-weight: bold;", "Téléchargement des Données:"),
" Cliquez sur le bouton Télécharger situé en dessous de la carte ou au-dessus du tableau pour récupérer les données."),
tags$a("Lien vers la vidéo de démonstration", href = "Lien.html", target = "_blank")
)
),
div(
class = "screenshot-section",
tags$img(src = "LOGO1.JPEG", class = "screenshot", width = "90%", alt = "Screenshot 1"),
tags$img(src = "LOGO2.JPEG", class = "screenshot", width = "90%", alt = "Screenshot 2"),
tags$img(src = "LOGO3.JPEG", class = "screenshot", width = "90%", alt = "Screenshot 3")
),
tags$div(style = "clear: both;") # Pour nettoyer le flottement
)
)
)
)
}
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
# 3) Définition des fichiers shapefile par pays
shapefile_noms <- list(
"Senegal" = list(
adm0 = "sen_admbnda_adm0_anat_20240520.shp",
adm1 = "sen_admbnda_adm1_anat_20240520.shp",
adm2 = "sen_admbnda_adm2_anat_20240520.shp",
adm3 = "sen_admbnda_adm3_anat_20240520.shp"
),
"Burkina" = list(
adm0 = "bfa_admbnda_adm0_igb_20200323.shp",
adm1 = "bfa_admbnda_adm1_igb_20200323.shp",
adm2 = "bfa_admbnda_adm2_igb_20200323.shp",
adm3 = "bfa_admbnda_adm3_igb_20200323.shp"
)
)
chemin_base <- "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data"
# 4) Fonction pour charger les données pour un pays donné
charger_donnees_pays <- function(pays) {
shapefile_path <- file.path(chemin_base, pays, "Shapefiles")
raster_path <- file.path(chemin_base, pays, "Rasters")
noms <- shapefile_noms[[pays]]
# Chargement des shapefiles
regions <- st_read(file.path(shapefile_path, noms$adm1), quiet = TRUE)
departments <- st_read(file.path(shapefile_path, noms$adm2), quiet = TRUE)
communes <- st_read(file.path(shapefile_path, noms$adm3), quiet = TRUE)
# Chargement des rasters
#Chargement des rasters en batch
raster_path <- file.path(chemin_base,pays, "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
#Calcul du raster moyen (mean_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
raster_nombre_malaria_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_nombre_malaria_enfants.tif"))
raster_pop_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_pop_enfants.tif"))
ndvi_raster <- raster(file.path(raster_path, paste0("Indices_spectraux/NDVI_", pays, ".tif")))
ndbi_raster<- raster(file.path(raster_path, paste0("Indices_spectraux/NDBI_", pays, ".tif")))
pop_resampled_binary<- raster(file.path(raster_path,"CDI/pop_resampled_binary.tif"))
mult_raster <- raster(file.path(raster_path, "CDI/mult_raster.tif"))
list(
regions = regions,
departments = departments,
communes = communes,
mean_raster = mean_raster,
raster_nombre_malaria_enfants = raster_nombre_malaria_enfants,
raster_pop_enfants = raster_pop_enfants,
ndvi_raster = ndvi_raster,
ndbi_raster = ndbi_raster,
pop_resampled_binary = pop_resampled_binary,
mult_raster = mult_raster
)
}
donnees <- charger_donnees_pays("Burkina")
library(shiny)
library(shinyjs)
library(leaflet)
library(dplyr)
library(ggplot2)
library(sf)
library(raster)
library(exactextractr)
library(viridis)
# 3) Définition des fichiers shapefile par pays
shapefile_noms <- list(
"Senegal" = list(
adm0 = "sen_admbnda_adm0_anat_20240520.shp",
adm1 = "sen_admbnda_adm1_anat_20240520.shp",
adm2 = "sen_admbnda_adm2_anat_20240520.shp",
adm3 = "sen_admbnda_adm3_anat_20240520.shp"
),
"Burkina" = list(
adm0 = "bfa_admbnda_adm0_igb_20200323.shp",
adm1 = "bfa_admbnda_adm1_igb_20200323.shp",
adm2 = "bfa_admbnda_adm2_igb_20200323.shp",
adm3 = "bfa_admbnda_adm3_igb_20200323.shp"
)
)
chemin_base <- "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data"
# 4) Fonction pour charger les données pour un pays donné
charger_donnees_pays <- function(pays) {
shapefile_path <- file.path(chemin_base, pays, "Shapefiles")
raster_path <- file.path(chemin_base, pays, "Rasters")
noms <- shapefile_noms[[pays]]
# Chargement des shapefiles
regions <- st_read(file.path(shapefile_path, noms$adm1), quiet = TRUE)
departments <- st_read(file.path(shapefile_path, noms$adm2), quiet = TRUE)
communes <- st_read(file.path(shapefile_path, noms$adm3), quiet = TRUE)
# Chargement des rasters
#Chargement des rasters en batch
raster_path <- file.path(chemin_base,pays, "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
#Calcul du raster moyen (mean_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
raster_nombre_malaria_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_nombre_malaria_enfants.tif"))
raster_pop_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_pop_enfants.tif"))
ndvi_raster <- raster(file.path(raster_path, paste0("Indices_spectraux/NDVI_", pays, ".tif")))
ndbi_raster<- raster(file.path(raster_path, paste0("Indices_spectraux/NDBI_", pays, ".tif")))
pop_resampled_binary<- raster(file.path(raster_path,"CDI/pop_resampled_binary.tif"))
mult_raster <- raster(file.path(raster_path, "CDI/mult_raster.tif"))
list(
regions = regions,
departments = departments,
communes = communes,
mean_raster = mean_raster,
raster_nombre_malaria_enfants = raster_nombre_malaria_enfants,
raster_pop_enfants = raster_pop_enfants,
ndvi_raster = ndvi_raster,
ndbi_raster = ndbi_raster,
pop_resampled_binary = pop_resampled_binary,
mult_raster = mult_raster
)
}
donnees <- charger_donnees_pays("Burkina")
print(donnees$regions)
# 5) Calculs par niveau administratif
calculer_indicateurs <- function(donnees) {
regions <- donnees$regions
departments <- donnees$departments
communes <- donnees$communes
mean_raster <- donnees$mean_raster
raster_nombre_malaria_enfants <- donnees$raster_nombre_malaria_enfants
raster_pop_enfants <- donnees$raster_pop_enfants
ndvi_raster <- donnees$ndvi_raster
ndbi_raster <- donnees$ndbi_raster
pop_resampled_binary <- donnees$pop_resampled_binary
mult_raster <- donnees$mult_raster
# Calculs pour les niveaux administratifs
regions$mean_index <- exact_extract(mean_raster, regions, 'mean')
regions$mean_ndvi <- exact_extract(ndvi_raster, regions, 'mean')
regions$mean_ndbi <- exact_extract(ndbi_raster, regions, 'mean')
regions$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, regions, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, regions, 'sum') / exact_extract(raster_pop_enfants, regions, 'sum'),
NA
)
departments$mean_index <- exact_extract(mean_raster, departments, 'mean')
departments$mean_ndvi <- exact_extract(ndvi_raster, departments, 'mean')
departments$mean_ndbi <- exact_extract(ndbi_raster, departments, 'mean')
departments$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, departments, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, departments, 'sum') / exact_extract(raster_pop_enfants, departments, 'sum'),
NA
)
communes$mean_index <- exact_extract(mean_raster, communes, 'mean')
communes$mean_ndvi <- exact_extract(ndvi_raster, communes, 'mean')
communes$mean_ndbi <- exact_extract(ndbi_raster, communes, 'mean')
communes$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, communes, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, communes, 'sum') / exact_extract(raster_pop_enfants, communes, 'sum'),
NA
)
# Calcul CDI pour chaque niveau
pop_count_regions <- exact_extract(pop_resampled_binary, regions, 'sum')
prod_count_regions <- exact_extract(mult_raster, regions, 'sum')
regions$CDI <- ifelse(pop_count_regions > 0, prod_count_regions / pop_count_regions, NA)
pop_count_departments <- exact_extract(pop_resampled_binary, departments, 'sum')
prod_count_departments <- exact_extract(mult_raster, departments, 'sum')
departments$CDI <- ifelse(pop_count_departments > 0, prod_count_departments / pop_count_departments, NA)
pop_count_communes <- exact_extract(pop_resampled_binary, communes, 'sum')
prod_count_communes <- exact_extract(mult_raster, communes, 'sum')
communes$CDI <- ifelse(pop_count_communes > 0, prod_count_communes / pop_count_communes, NA)
list(
regions = regions,
departments = departments,
communes = communes
)
}
calculer_indicateurs(donnees)
View(donnees$regions)
regions <- donnees$regions
departments <- donnees$departments
communes <- donnees$communes
mean_raster <- donnees$mean_raster
raster_nombre_malaria_enfants <- donnees$raster_nombre_malaria_enfants
raster_pop_enfants <- donnees$raster_pop_enfants
ndvi_raster <- donnees$ndvi_raster
ndbi_raster <- donnees$ndbi_raster
pop_resampled_binary <- donnees$pop_resampled_binary
mult_raster <- donnees$mult_raster
# Calculs pour les niveaux administratifs
regions$mean_index <- exact_extract(mean_raster, regions, 'mean')
regions$mean_ndvi <- exact_extract(ndvi_raster, regions, 'mean')
regions$mean_ndbi <- exact_extract(ndbi_raster, regions, 'mean')
regions$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, regions, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, regions, 'sum') / exact_extract(raster_pop_enfants, regions, 'sum'),
NA
)
departments$mean_index <- exact_extract(mean_raster, departments, 'mean')
departments$mean_ndvi <- exact_extract(ndvi_raster, departments, 'mean')
departments$mean_ndbi <- exact_extract(ndbi_raster, departments, 'mean')
departments$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, departments, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, departments, 'sum') / exact_extract(raster_pop_enfants, departments, 'sum'),
NA
)
communes$mean_index <- exact_extract(mean_raster, communes, 'mean')
communes$mean_ndvi <- exact_extract(ndvi_raster, communes, 'mean')
communes$mean_ndbi <- exact_extract(ndbi_raster, communes, 'mean')
communes$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, communes, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, communes, 'sum') / exact_extract(raster_pop_enfants, communes, 'sum'),
NA
)
# Calcul CDI pour chaque niveau
pop_count_regions <- exact_extract(pop_resampled_binary, regions, 'sum')
prod_count_regions <- exact_extract(mult_raster, regions, 'sum')
regions$CDI <- ifelse(pop_count_regions > 0, prod_count_regions / pop_count_regions, NA)
pop_count_departments <- exact_extract(pop_resampled_binary, departments, 'sum')
prod_count_departments <- exact_extract(mult_raster, departments, 'sum')
departments$CDI <- ifelse(pop_count_departments > 0, prod_count_departments / pop_count_departments, NA)
pop_count_communes <- exact_extract(pop_resampled_binary, communes, 'sum')
prod_count_communes <- exact_extract(mult_raster, communes, 'sum')
communes$CDI <- ifelse(pop_count_communes > 0, prod_count_communes / pop_count_communes, NA)
View(donnees$regions)
View(regions)
enregistrer_shapefiles <- function(regions, departments, communes, "Burkina") {
enregistrer_shapefiles <- function(regions, departments, communes, "Burkina") {
chemin_sauvegarde <- file.path(chemin_base, pays, "Shapefiles_Optimisés")
if (!dir.exists(chemin_sauvegarde)) {
dir.create(chemin_sauvegarde, recursive = TRUE)
}
chemin_sauvegarde <- file.path(chemin_base, "Burkina", "Shapefiles_Optimisés")
if (!dir.exists(chemin_sauvegarde)) {
dir.create(chemin_sauvegarde, recursive = TRUE)
}
# Sauvegarde en GeoJSON (lisible avec QGIS, R, Python, etc.)
st_write(regions, file.path(chemin_sauvegarde, paste0("regions_", pays, ".geojson")), delete_dsn = TRUE)
st_write(communes, file.path(chemin_sauvegarde, paste0("communes_", "Burkina", ".geojson")), delete_dsn = TRUE)
# Sauvegarde en GeoJSON (lisible avec QGIS, R, Python, etc.)
st_write(regions, file.path(chemin_sauvegarde, paste0("regions_", "Burkina", ".geojson")), delete_dsn = TRUE)
st_write(departments, file.path(chemin_sauvegarde, paste0("departments_", "Burkina", ".geojson")), delete_dsn = TRUE)
st_write(communes, file.path(chemin_sauvegarde, paste0("communes_", "Burkina", ".geojson")), delete_dsn = TRUE)
# Sauvegarde en RDS (plus rapide à charger en R)
saveRDS(regions, file.path(chemin_sauvegarde, paste0("regions_", pays, ".rds")))
# Sauvegarde en RDS (plus rapide à charger en R)
saveRDS(regions, file.path(chemin_sauvegarde, paste0("regions_", "Burkina", ".rds")))
saveRDS(departments, file.path(chemin_sauvegarde, paste0("departments_", "Burkina", ".rds")))
saveRDS(communes, file.path(chemin_sauvegarde, paste0("communes_", "Burkina", ".rds")))
message("✅ Shapefiles optimisés enregistrés pour ", pays)
chemin_base <- "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data"
# 4) Fonction pour charger les données pour un pays donné
charger_donnees_pays <- function(pays) {
shapefile_path <- file.path(chemin_base, pays, "Shapefiles")
raster_path <- file.path(chemin_base, pays, "Rasters")
noms <- shapefile_noms[[pays]]
# Chargement des shapefiles
regions <- st_read(file.path(shapefile_path, noms$adm1), quiet = TRUE)
departments <- st_read(file.path(shapefile_path, noms$adm2), quiet = TRUE)
communes <- st_read(file.path(shapefile_path, noms$adm3), quiet = TRUE)
# Chargement des rasters
#Chargement des rasters en batch
raster_path <- file.path(chemin_base,pays, "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
#Calcul du raster moyen (mean_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
raster_nombre_malaria_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_nombre_malaria_enfants.tif"))
raster_pop_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_pop_enfants.tif"))
ndvi_raster <- raster(file.path(raster_path, paste0("Indices_spectraux/NDVI_", pays, ".tif")))
ndbi_raster<- raster(file.path(raster_path, paste0("Indices_spectraux/NDBI_", pays, ".tif")))
pop_resampled_binary<- raster(file.path(raster_path,"CDI/pop_resampled_binary.tif"))
mult_raster <- raster(file.path(raster_path, "CDI/mult_raster.tif"))
list(
regions = regions,
departments = departments,
communes = communes,
mean_raster = mean_raster,
raster_nombre_malaria_enfants = raster_nombre_malaria_enfants,
raster_pop_enfants = raster_pop_enfants,
ndvi_raster = ndvi_raster,
ndbi_raster = ndbi_raster,
pop_resampled_binary = pop_resampled_binary,
mult_raster = mult_raster
)
}
donnees <- charger_donnees_pays("Senegal")
regions <- donnees$regions
departments <- donnees$departments
communes <- donnees$communes
mean_raster <- donnees$mean_raster
raster_nombre_malaria_enfants <- donnees$raster_nombre_malaria_enfants
raster_pop_enfants <- donnees$raster_pop_enfants
ndvi_raster <- donnees$ndvi_raster
ndbi_raster <- donnees$ndbi_raster
pop_resampled_binary <- donnees$pop_resampled_binary
mult_raster <- donnees$mult_raster
# Calculs pour les niveaux administratifs
regions$mean_index <- exact_extract(mean_raster, regions, 'mean')
regions$mean_ndvi <- exact_extract(ndvi_raster, regions, 'mean')
regions$mean_ndbi <- exact_extract(ndbi_raster, regions, 'mean')
regions$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, regions, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, regions, 'sum') / exact_extract(raster_pop_enfants, regions, 'sum'),
NA
)
departments$mean_index <- exact_extract(mean_raster, departments, 'mean')
departments$mean_ndvi <- exact_extract(ndvi_raster, departments, 'mean')
departments$mean_ndbi <- exact_extract(ndbi_raster, departments, 'mean')
departments$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, departments, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, departments, 'sum') / exact_extract(raster_pop_enfants, departments, 'sum'),
NA
)
communes$mean_index <- exact_extract(mean_raster, communes, 'mean')
communes$mean_ndvi <- exact_extract(ndvi_raster, communes, 'mean')
communes$mean_ndbi <- exact_extract(ndbi_raster, communes, 'mean')
communes$taux_malaria_enfants <- ifelse(
exact_extract(raster_pop_enfants, communes, 'sum') > 0,
exact_extract(raster_nombre_malaria_enfants, communes, 'sum') / exact_extract(raster_pop_enfants, communes, 'sum'),
NA
)
# Calcul CDI pour chaque niveau
pop_count_regions <- exact_extract(pop_resampled_binary, regions, 'sum')
prod_count_regions <- exact_extract(mult_raster, regions, 'sum')
regions$CDI <- ifelse(pop_count_regions > 0, prod_count_regions / pop_count_regions, NA)
pop_count_departments <- exact_extract(pop_resampled_binary, departments, 'sum')
prod_count_departments <- exact_extract(mult_raster, departments, 'sum')
departments$CDI <- ifelse(pop_count_departments > 0, prod_count_departments / pop_count_departments, NA)
pop_count_communes <- exact_extract(pop_resampled_binary, communes, 'sum')
prod_count_communes <- exact_extract(mult_raster, communes, 'sum')
communes$CDI <- ifelse(pop_count_communes > 0, prod_count_communes / pop_count_communes, NA)
View(regions)
chemin_sauvegarde <- file.path(chemin_base, "Senegal", "Shapefiles_Optimises")
if (!dir.exists(chemin_sauvegarde)) {
dir.create(chemin_sauvegarde, recursive = TRUE)
}
# Sauvegarde en GeoJSON (lisible avec QGIS, R, Python, etc.)
st_write(regions, file.path(chemin_sauvegarde, paste0("regions", ".geojson")), delete_dsn = TRUE)
st_write(departments, file.path(chemin_sauvegarde, paste0("departments",  ".geojson")), delete_dsn = TRUE)
st_write(communes, file.path(chemin_sauvegarde, paste0("communes",  ".geojson")), delete_dsn = TRUE)
# Sauvegarde en RDS (plus rapide à charger en R)
saveRDS(regions, file.path(chemin_sauvegarde, paste0("regions",  ".rds")))
saveRDS(departments, file.path(chemin_sauvegarde, paste0("departments",  ".rds")))
saveRDS(communes, file.path(chemin_sauvegarde, paste0("communes", ".rds")))
message("✅ Shapefiles optimisés enregistrés pour ", pays)
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
# Chargement des rasters
#Chargement des rasters en batch
raster_path <- file.path(chemin_base,"Senegal", "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
plot(mean_raster)
# Chargement des rasters
#Chargement des rasters en batch
raster_path <- file.path(chemin_base,"Senegal", "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
plot(mean_raster)
writeRaster(mean_raster, filename = "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/Rasters/mean_raster", format = "GTiff", overwrite = TRUE)
raster_path <- file.path(chemin_base,"Burkina", "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
plot(mean_raster)
writeRaster(mean_raster, filename = "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Burkina/Rasters/mean_raster", format = "GTiff", overwrite = TRUE)
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
# Chargement des rasters
#Chargement des rasters en batch
raster_path <- file.path(chemin_base,"Senegal", "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
plot(mean_raster)
writeRaster(mean_raster, filename = "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/Rasters/malaria/mean_raster", format = "GTiff", overwrite = TRUE)
raster_path <- file.path(chemin_base,"Burkina", "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
plot(mean_raster)
writeRaster(mean_raster, filename = "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Burkina/Rasters/malaria/mean_raster", format = "GTiff", overwrite = TRUE)
# Chargement des rasters
#Chargement des rasters en batch
raster_path <- file.path(chemin_base,"Senegal", "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
rasters <- stack(fichiers_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
plot(mean_raster)
writeRaster(mean_raster, filename = "C:/Users/HP/OneDrive/Documents/GitHub/Projet_Final_Stat_Spatiale/data/Senegal/Rasters/malaria/mean_raster", format = "GTiff", overwrite = TRUE)
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
donnees <- charger_donnees_pays("Senegal")
donnees <- charger_donnees_pays("Senegal")
resultats <- calculer_indicateurs(donnees)
View(donnees$regions)
View(donnees$departements)
View(donnees$departments)
View(donnees$communes)
runApp('Scripts R KD/app_KD.R')
library(shiny); runApp('Scripts R KD/app_KD.R')
donnees <- charger_donnees_pays("Senegal")
View(donnees$regions)
donnees <- charger_donnees_pays("Burkina")
View(donnees$regions)
runApp('Scripts R KD/app_KD.R')
View(donnees$regions$ADM1_FR)
update_data_global("Senegal")
View(data_global$regions)
reactive()
observe()
update_data_global("Senegal")
View(data_global$regions)
runApp('Scripts R KD/app_KD.R')
runApp('Scripts R KD/app_KD.R')
