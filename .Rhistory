req(input$region, validate_chosen_col())
df <- deps_filtered()
ggplot(df, aes(x = ADM2_FR, y = .data[[chosen_col()]], group = 1)) +
geom_line(color = "blue") +
geom_point(color = "blue", size = 2) +
theme_minimal() +
labs(title = "Taux par Département", x = "Département", y = "Valeur") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$com_plot <- renderPlot({
req(input$region, validate_chosen_col())
df <- coms_filtered()
ggplot(df, aes(x = ADM3_FR, y = .data[[chosen_col()]], group = 1)) +
geom_line(color = "red") +
geom_point(color = "red", size = 2) +
theme_minimal() +
labs(title = "Taux par Commune", x = "Commune", y = "Valeur") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Téléchargements PNG pour Départements / Communes
output$download_dep_plot <- downloadHandler(
filename = function() {
paste0("graphique_departements_", input$region, "_", Sys.Date(), ".png")
},
content = function(file) {
df <- deps_filtered()
p <- ggplot(df, aes(x = ADM2_FR, y = .data[[chosen_col()]])) +
geom_line(color = "blue") +
geom_point(color = "blue") +
theme_minimal() +
labs(title = "Graphique par Département", x = "Département", y = "Valeur")
ggsave(file, plot = p, device = "png", width = 10, height = 6)
}
)
output$download_com_plot <- downloadHandler(
filename = function() {
paste0("graphique_communes_", input$region, "_", Sys.Date(), ".png")
},
content = function(file) {
df <- coms_filtered()
p <- ggplot(df, aes(x = ADM3_FR, y = .data[[chosen_col()]])) +
geom_line(color = "red") +
geom_point(color = "red") +
theme_minimal() +
labs(title = "Graphique par Commune", x = "Commune", y = "Valeur")
ggsave(file, plot = p, device = "png", width = 10, height = 6)
}
)
})
}
runApp('Scripts R Salam/app_KD.R')
>>>>>>> be81c32eecd974477f59bbd98a8bb95e18dd8f3b
# ─────────────────────────────────────────────────────────────────────────────
# mod_state_filter_page_KD.R
# Module 4 : Sélection d’une Région, puis onglets Résumé, Tableau, Graphique
# + Téléchargements
# ─────────────────────────────────────────────────────────────────────────────
<<<<<<< HEAD
pop_df <- as.data.frame(rasterToPoints(pop), stringsAsFactors = FALSE)
runApp('C:/Users/ALIOUNE KANE/Downloads/Projet_Final_Stats_Spatiales/Scripts R')
runApp('C:/Users/ALIOUNE KANE/Downloads/Projet_Final_Stats_Spatiales/Scripts R')
shiny::runApp('Scripts R')
library(shiny); runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
# ─────────────────────────────────────────────────────────────────────────────
# mod_about_page.R
# Page "About"
# ─────────────────────────────────────────────────────────────────────────────
mod_about_page_ui <- function(id) {
ns <- NS(id)
tagList(
# Vous pouvez aussi utiliser fluidPage ou fluidRow si vous préférez
fluidRow(
column(
width = 12,
tags$h2("À propos"),
tags$p("Ici, vous pouvez décrire l'objectif général de l'application, ",
"la méthodologie d'ensemble, vos sources de données, etc."),
tags$hr(),
tags$p("Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
"Sed nec risus quis libero ornare semper. Praesent vehicula ",
"justo non faucibus sollicitudin. Pellentesque vehicula augue ",
"a sollicitudin sodales. Proin blandit sit amet erat non ",
"feugiat... (texte d'exemple à remplacer).")
=======
mod_state_filter_page_ui <- function(id){
ns <- NS(id)
fluidPage(
# Le module n’apparaît que si le pays ET l’indicateur sont sélectionnés
conditionalPanel(
condition = sprintf("input['landing_page-country'] !== '' && input['landing_page-indicator_chosen'] !== ''"),
fluidRow(
column(
width = 3,
# Liste dynamique des régions (on mettra à jour dans le server)
selectInput(ns("region"), "Sélectionnez une Région :",
choices = c("")),
selectInput(ns("signif"), "Filtrer par Significativité (ou seuil) :",
choices = c("Afficher tout", "Moins de 0.3", "0.3 à 0.6", "Plus de 0.6")),
helpText("Les données affichées peuvent être filtrées selon la fourchette de valeurs.")
),
column(
width = 9,
# Afficher la suite uniquement si on a choisi une région
conditionalPanel(
condition = sprintf("input['%s'] != ''", ns("region")),
div(
class = "dark-box",
div(
class = "red-title-box",
textOutput(ns("selected_indicator_title"))
),
div(
class = "red-title-box",
textOutput(ns("selected_region_title"))
),
p("Nous présentons ci-dessous les statistiques résumées par région ",
"pour l'indicateur sélectionné.")
),
tabsetPanel(
# --- Onglet Résumé ---
tabPanel(
title = "Résumé",
br(),
# Bouton de téléchargement pour le tableau résumé
downloadButton(ns("download_resume_table"), "Télécharger le résumé (CSV)"),
tableOutput(ns("resume_table")),
hr(),
textOutput(ns("resume_comment"))
),
# --- Onglet Tableau ---
tabPanel(
title = "Tableau",
br(),
h4("Tableau des Départements"),
downloadButton(ns("download_dep_table"), "Télécharger (CSV)"),
tableOutput(ns("dep_table")),
h4("Tableau des Communes"),
downloadButton(ns("download_com_table"), "Télécharger (CSV)"),
tableOutput(ns("com_table")),
hr(),
textOutput(ns("table_comment"))
),
# --- Onglet Graphique ---
tabPanel(
title = "Graphique",
br(),
plotOutput(ns("dep_plot"), height = "300px"),
downloadButton(ns("download_dep_plot"), "Télécharger Graphique Départements (PNG)"),
plotOutput(ns("com_plot"), height = "300px"),
downloadButton(ns("download_com_plot"), "Télécharger Graphique Communes (PNG)")
)
)
)
)
>>>>>>> be81c32eecd974477f59bbd98a8bb95e18dd8f3b
)
)
)
}
<<<<<<< HEAD
mod_about_page_server <- function(id) {
moduleServer(id, function(input, output, session) {
# A priori, rien de particulier dans le serveur pour une page statique
})
}
runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
# ─────────────────────────────────────────────────────────────────────────────
# global_KD.R
# Chargement des librairies, définition des indicateurs,
# et gestion multi-pays (Sénégal/Burkina) avec calculs par niveau admin.
# ─────────────────────────────────────────────────────────────────────────────
# 1) Chargement des bibliothèques
library(shiny)
library(shinyjs)
library(leaflet)
library(dplyr)
library(ggplot2)
library(sf)
library(raster)
library(exactextractr)
library(viridis)
# 2) Définition des indicateurs par pays
fake_indicators <- list(
"Senegal" = c("Taux moyen de Paludisme", "Taux de malaria chez les enfants", "NDVI"),
"Burkina" = c("Taux moyen de Paludisme", "Taux de malaria chez les enfants", "NDVI")
)
# 3) Paramétrage des chemins de shapefiles/rasters par pays
#    Adaptez à votre propre organisation des dossiers !
chemin_base <- "C:/Users/ALIOUNE KANE/Downloads/Projet_Final_Stats_Spatiales/data"
shapefile_noms <- list(
"Senegal" = list(
adm1 = "sen_admbnda_adm1_anat_20240520.shp",
adm2 = "sen_admbnda_adm2_anat_20240520.shp",
adm3 = "sen_admbnda_adm3_anat_20240520.shp"
),
"Burkina" = list(
adm1 = "bfa_admbnda_adm1_igb_20200323.shp",
adm2 = "bfa_admbnda_adm2_igb_20200323.shp",
adm3 = "bfa_admbnda_adm3_igb_20200323.shp"
)
)
# 4) Fonction pour charger les shapefiles/rasters d’un pays
charger_donnees_pays <- function(pays) {
# Shapefiles
shapefile_path <- file.path(chemin_base, pays, "Shapefiles")
noms <- shapefile_noms[[pays]]
regions     <- st_read(file.path(shapefile_path, noms$adm1), quiet = TRUE)
departments <- st_read(file.path(shapefile_path, noms$adm2), quiet = TRUE)
communes    <- st_read(file.path(shapefile_path, noms$adm3), quiet = TRUE)
# Rasters
raster_path <- file.path(chemin_base, pays, "Rasters")
fichiers_raster <- list.files(raster_path, pattern = "\\.tiff$", full.names = TRUE)
# On stack tous les .tiff
if (length(fichiers_raster) > 0) {
rasters <- stack(fichiers_raster)
mean_raster <- calc(rasters, fun = mean, na.rm = TRUE)
} else {
mean_raster <- NULL
}
# EXEMPLE : rasters additionnels
# À adapter selon vos vrais fichiers
raster_nombre_malaria_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_nombre_malaria_enfants.tif"))
raster_pop_enfants <- raster(file.path(raster_path, "malaria_enfants/raster_pop_enfants.tif"))
ndvi_raster <- raster(file.path(raster_path, paste0("Indices_spectraux/NDVI_", pays, ".tif")))
list(
regions = regions,
departments = departments,
communes = communes,
mean_raster = mean_raster,
raster_nombre_malaria_enfants = raster_nombre_malaria_enfants,
raster_pop_enfants = raster_pop_enfants,
ndvi_raster = ndvi_raster
)
}
# 5) Calculs de base pour enrichir les shapefiles
calculer_indicateurs <- function(donnees) {
# Récupération
regions     <- donnees$regions
departments <- donnees$departments
communes    <- donnees$communes
mean_raster      <- donnees$mean_raster
raster_malaria   <- donnees$raster_nombre_malaria_enfants
raster_pop       <- donnees$raster_pop_enfants
ndvi_raster      <- donnees$ndvi_raster
# Si le raster est NULL (en cas d’absence de fichiers), on gère prudemment
if (!is.null(mean_raster)) {
# Taux moyen de paludisme (exemple)
regions$mean_index     <- exact_extract(mean_raster, regions, 'mean')
departments$mean_index <- exact_extract(mean_raster, departments, 'mean')
communes$mean_index    <- exact_extract(mean_raster, communes, 'mean')
}
if (!is.null(ndvi_raster)) {
regions$mean_ndvi     <- exact_extract(ndvi_raster, regions, 'mean')
departments$mean_ndvi <- exact_extract(ndvi_raster, departments, 'mean')
communes$mean_ndvi    <- exact_extract(ndvi_raster, communes, 'mean')
}
if (!is.null(raster_malaria) && !is.null(raster_pop)) {
# Taux malaria enfants = sum(malaria_enf) / sum(pop_enf)
reg_mal <- exact_extract(raster_malaria, regions, 'sum')
reg_pop <- exact_extract(raster_pop,     regions, 'sum')
regions$taux_malaria_enfants <- ifelse(reg_pop > 0, reg_mal / reg_pop, NA)
dep_mal <- exact_extract(raster_malaria, departments, 'sum')
dep_pop <- exact_extract(raster_pop,     departments, 'sum')
departments$taux_malaria_enfants <- ifelse(dep_pop > 0, dep_mal / dep_pop, NA)
com_mal <- exact_extract(raster_malaria, communes, 'sum')
com_pop <- exact_extract(raster_pop,     communes, 'sum')
communes$taux_malaria_enfants <- ifelse(com_pop > 0, com_mal / com_pop, NA)
}
list(
regions = regions,
departments = departments,
communes = communes
)
}
# 6) Stockage "global" réactif (pour le pays en cours)
data_global <- reactiveValues(
regions = NULL,
departments = NULL,
communes = NULL,
mean_raster = NULL,
raster_nombre_malaria_enfants = NULL,
raster_pop_enfants = NULL,
ndvi_raster = NULL
)
# 7) Fonction qui met à jour data_global selon le pays
update_data_global <- function(pays) {
# Charger
donnees_brutes <- charger_donnees_pays(pays)
# Calculer les indicateurs
res <- calculer_indicateurs(donnees_brutes)
data_global$regions     <- res$regions
data_global$departments <- res$departments
data_global$communes    <- res$communes
data_global$mean_raster                <- donnees_brutes$mean_raster
data_global$raster_nombre_malaria_enfants <- donnees_brutes$raster_nombre_malaria_enfants
data_global$raster_pop_enfants         <- donnees_brutes$raster_pop_enfants
data_global$ndvi_raster                <- donnees_brutes$ndvi_raster
message("Données mises à jour pour le pays : ", pays)
}
# Fin de global_KD.R
# ─────────────────────────────────────────────────────────────────────────────
=======
mod_state_filter_page_server <- function(id, landing_inputs, indicator_chosen_) {
moduleServer(id, function(input, output, session) {
data_reac <- reactive({ landing_inputs() })
# 1) Mettre à jour la liste de régions dès que data_global$regions est modifié (multi-pays)
observeEvent(data_global$regions, {
req(data_global$regions)
region_choices <- sort(unique(data_global$regions$ADM1_FR))
updateSelectInput(
session, "region",
choices = c("", region_choices),
selected = ""
)
})
# 2) Titres
output$selected_indicator_title <- renderText({
req(data_reac()$indicator_chosen)
paste("Indicateur sélectionné :", data_reac()$indicator_chosen)
})
output$selected_region_title <- renderText({
req(input$region)
paste("Région sélectionnée :", input$region)
})
# 3) Fonction pour la fourchette
getRange <- function(signif_str) {
if (signif_str == "Moins de 0.3") return(c(-Inf, 0.3))
if (signif_str == "0.3 à 0.6")   return(c(0.3, 0.6))
if (signif_str == "Plus de 0.6") return(c(0.6, Inf))
c(-Inf, Inf)  # Par défaut
}
# 4) Colonne selon l’indicateur
chosen_col <- reactive({
switch(
data_reac()$indicator_chosen,
"Taux moyen de Paludisme"          = "mean_index",
"Taux de malaria chez les enfants" = "taux_malaria_enfants",
"NDVI"                             = "mean_ndvi",
NULL
)
})
validate_chosen_col <- reactive({
if (is.null(chosen_col())) {
showNotification("Aucun indicateur valide n'est sélectionné.", type = "error")
stop("Colonne choisie NULL.")
}
chosen_col()
})
# 5) Filtrage
deps_filtered <- reactive({
req(input$region, validate_chosen_col())
minmax <- getRange(input$signif)
data_global$departments %>%
filter(
ADM1_FR == input$region,
.data[[chosen_col()]] >= minmax[1],
.data[[chosen_col()]] <= minmax[2]
)
})
coms_filtered <- reactive({
req(input$region, validate_chosen_col())
minmax <- getRange(input$signif)
data_global$communes %>%
filter(
ADM1_FR == input$region,
.data[[chosen_col()]] >= minmax[1],
.data[[chosen_col()]] <= minmax[2]
)
})
# 6) Tableau Résumé
summary_table_reactive <- reactive({
req(input$region, validate_chosen_col())
dep_vals <- deps_filtered()[[chosen_col()]]
com_vals <- coms_filtered()[[chosen_col()]]
reg_val <- data_global$regions %>%
filter(ADM1_FR == input$region) %>%
pull(chosen_col())
data.frame(
row.names = c("Moyenne", "Maximum", "Minimum"),
"Région"      = c(
round(mean(reg_val, na.rm = TRUE), 3),
round(max(reg_val, na.rm = TRUE), 3),
round(min(reg_val, na.rm = TRUE), 3)
),
"Département" = c(
round(mean(dep_vals, na.rm = TRUE), 3),
round(max(dep_vals, na.rm = TRUE), 3),
round(min(dep_vals, na.rm = TRUE), 3)
),
"Commune"     = c(
round(mean(com_vals, na.rm = TRUE), 3),
round(max(com_vals, na.rm = TRUE), 3),
round(min(com_vals, na.rm = TRUE), 3)
)
)
})
output$resume_table <- renderTable({
summary_table_reactive()
}, rownames = TRUE)
output$resume_comment <- renderText({
"Interprétation : ce tableau compare la valeur régionale et les valeurs des départements/communes filtrés."
})
# *** Téléchargement du tableau Résumé ***
output$download_resume_table <- downloadHandler(
filename = function(){
paste0("resume_table_", input$region, "_", Sys.Date(), ".csv")
},
content = function(file){
write.csv(summary_table_reactive(), file, row.names = TRUE)
}
)
# 7) Tableaux départements / communes
output$dep_table <- renderTable({
req(input$region, validate_chosen_col())
df <- deps_filtered()
data.frame(
Département = df$ADM2_FR,
Taux = round(df[[chosen_col()]], 3)
)
})
output$com_table <- renderTable({
req(input$region, validate_chosen_col())
df <- coms_filtered()
data.frame(
Commune = df$ADM3_FR,
Taux = round(df[[chosen_col()]], 3)
)
})
output$table_comment <- renderText({
"Tableaux listant les départements et communes respectant le filtre choisi."
})
# Téléchargements CSV pour Départements / Communes
output$download_dep_table <- downloadHandler(
filename = function(){
paste0("departements_", input$region, "_", Sys.Date(), ".csv")
},
content = function(file){
write.csv(deps_filtered(), file, row.names = FALSE)
}
)
output$download_com_table <- downloadHandler(
filename = function(){
paste0("communes_", input$region, "_", Sys.Date(), ".csv")
},
content = function(file){
write.csv(coms_filtered(), file, row.names = FALSE)
}
)
# 8) Graphiques Départements / Communes
output$dep_plot <- renderPlot({
req(input$region, validate_chosen_col())
df <- deps_filtered()
ggplot(df, aes(x = ADM2_FR, y = .data[[chosen_col()]], group = 1)) +
geom_line(color = "blue") +
geom_point(color = "blue", size = 2) +
theme_minimal() +
labs(title = "Taux par Département", x = "Département", y = "Valeur") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
output$com_plot <- renderPlot({
req(input$region, validate_chosen_col())
df <- coms_filtered()
ggplot(df, aes(x = ADM3_FR, y = .data[[chosen_col()]], group = 1)) +
geom_line(color = "red") +
geom_point(color = "red", size = 2) +
theme_minimal() +
labs(title = "Taux par Commune", x = "Commune", y = "Valeur") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Téléchargements PNG pour Départements / Communes
output$download_dep_plot <- downloadHandler(
filename = function() {
paste0("graphique_departements_", input$region, "_", Sys.Date(), ".png")
},
content = function(file) {
df <- deps_filtered()
p <- ggplot(df, aes(x = ADM2_FR, y = .data[[chosen_col()]])) +
geom_line(color = "blue") +
geom_point(color = "blue") +
theme_minimal() +
labs(title = "Graphique par Département", x = "Département", y = "Valeur")
ggsave(file, plot = p, device = "png", width = 10, height = 6)
}
)
output$download_com_plot <- downloadHandler(
filename = function() {
paste0("graphique_communes_", input$region, "_", Sys.Date(), ".png")
},
content = function(file) {
df <- coms_filtered()
p <- ggplot(df, aes(x = ADM3_FR, y = .data[[chosen_col()]])) +
geom_line(color = "red") +
geom_point(color = "red") +
theme_minimal() +
labs(title = "Graphique par Commune", x = "Commune", y = "Valeur")
ggsave(file, plot = p, device = "png", width = 10, height = 6)
}
)
})
}
>>>>>>> be81c32eecd974477f59bbd98a8bb95e18dd8f3b
runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
library(shiny); runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
runApp('Scripts R Salam/app_KD.R')
